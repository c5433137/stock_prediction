package logic

import (
	"crypto/hmac"
	"crypto/sha256"
	"encoding/hex"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"strconv"
	"strings"
	"time"
)
//用如下结构体，存储每日行情数据
type Autogenerated struct {
	ShowapiResError string `json:"showapi_res_error"`
	ShowapiResID    string `json:"showapi_res_id"`
	ShowapiResCode  int    `json:"showapi_res_code"`
	ShowapiResBody  struct {
		RetCode int `json:"ret_code"`
		List  []CodeList   `json:"list"`
	} `json:"showapi_res_body"`
}
type CodeList struct {
	TradeMoney string `json:"trade_money"`
	DiffMoney string `json:"diff_money"`
	Code string `json:"code"`
	OpenPrice string `json:"open_price"` //开盘价
	Date string `json:"date"`
	Market string `json:"market"`
	MinPrice string `json:"min_price"`
	TradeNum string `json:"trade_num"`
	Turnover string `json:"turnover"`
	ClosePrice string `json:"close_price"`
	MaxPrice string `json:"max_price"`
	Swing string `json:"swing"`
	DiffRate string `json:"diff_rate"`
}

const (
	appCode = "d89605b3808641f5bba60ddd8e09de0a"
	accessKey = "eaeb1f2f1aff4ac0bdcd1be6ec5fcdc0"
	secretKey = "d89605b3808641f5bba60ddd8e09de0a"
)
func hmacSha256(secret string, data string) string {
	h := hmac.New(sha256.New, []byte(secret))
	h.Write([]byte(data))
	return hex.EncodeToString(h.Sum(nil))
}
func calSign(src string,expire int) string {
	tstr:=time.Now().Add(time.Hour*-8).Format("2006-01-02T15:04:05Z")//服务器时区有问题 坑
	//tstr="2021-05-15T18:17:28Z"
	authStringPrefix:=fmt.Sprintf("bce-auth-v1/%s/%s/%d",accessKey,tstr,expire)
	//待签名字符串
	signingKey:=hmacSha256(secretKey, authStringPrefix)
	signature := hmacSha256(signingKey, src)
	return  fmt.Sprintf("%s/%s/%s",authStringPrefix,"host",signature)
}
func getSrc(method,uri,params,head string) string {
	//params=url.QueryEscape(params)
	return fmt.Sprintf(`%s
%s
%s
%s`,method,uri,params,head)//和\n有区别
}

var dateForm = "2006-01-02"
func GetStockData(stockId string)[]CodeList  {
	now:=time.Now()
	start:=now.AddDate(0,-1,0).Format(dateForm)
	end:=now.Format(dateForm)
	return getStockData(stockId,start,end)
}
//区间跨度太大会报错
func getStockData(stockId,start,end string)[]CodeList  {
	h:="stocks.api.bdymkt.com"
	url := "http://stocks.api.bdymkt.com/stockHistoryK"
	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		panic(err)
	}
	req.Header.Add("Content-Type", "application/json;charset=UTF-8")
	//bce-auth-v1/{accessKey}/{timestamp} /{expirationPeriodInSeconds}/{signedHeaders}/{signature}
	query := req.URL.Query()

	query.Add("begin", start)
	query.Add("code", stockId)
	query.Add("end", end)
	query.Add("type", "qfq")//前复权数据

	req.URL.RawQuery = query.Encode()
	src:=getSrc(http.MethodGet,req.URL.Path,req.URL.RawQuery,fmt.Sprintf("host:%s",h))
	sign:=calSign(src,10000)
	fmt.Println(strings.EqualFold(sign,
		"bce-auth-v1/eaeb1f2f1aff4ac0bdcd1be6ec5fcdc0/2021-05-15T18:17:28Z/10000/host/27e1e9b764d22b975d9c8b3555efb9e74c6f6ce60a98bbf3cc37323ead3b56a1"))
	req.Header.Add("X-Bce-Signature", sign)
	req.Header.Add("Host", h)
	//req.Header.Add("X-Bce-Signature", fmt.Sprintf("AppCode/%s",appCode))
	fmt.Println("------: ",req.URL.Path,req.URL.RawQuery)

	client := &http.Client{}
	req.Method=http.MethodGet
	resp, err := client.Do(req)
	if err != nil {
		panic(err)
	}
	defer resp.Body.Close()

	fmt.Println("Response status: ", resp.Status)
	fmt.Println("Response headers: ", resp.Header)
	respBody, _ := ioutil.ReadAll(resp.Body)
	fmt.Println("Response body: ", string(respBody))
	res:=&Autogenerated{}
	err = json.Unmarshal(respBody,res)
	if err != nil{
		panic(err)
	}
	return res.ShowapiResBody.List
}

func (c *CodeList)convertSliceFloat()[]float64  {
	OpenPrice,_:=strconv.ParseFloat(c.OpenPrice,64)
	ClosePrice,_:=strconv.ParseFloat(c.ClosePrice,64)
	MinPrice,_:=strconv.ParseFloat(c.MinPrice,64)
	MaxPrice,_:=strconv.ParseFloat(c.MaxPrice,64)
	return []float64{
		OpenPrice,
		ClosePrice,
		MinPrice,
		MaxPrice,
	}
}

